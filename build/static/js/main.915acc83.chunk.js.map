{"version":3,"sources":["store/ducks/player/actions.js","store/initialState.js","store/ducks/player/reducers.js","store/ducks/map/actions.js","store/ducks/map/reducers.js","store/ducks/stage/reducers.js","store/ducks/userInput/actions.js","store/ducks/userInput/reducers.js","store/ducks/userInput/selecors.js","hooks/useUserInput.js","store/ducks/userInput/operations.js","components/UserInput.js","store/ducks/player/operations.js","store/ducks/player/selecors.js","hooks/common/useTextureLoader.js","hooks/usePlayer.js","components/Player.js","store/ducks/map/selecors.js","store/ducks/map/operations.js","hooks/useMap.js","components/Map.js","hooks/useGameLoop.js","components/GameLoop.js","components/ContextBridge.js","App.js","index.js","store/store.js"],"names":["PLAYER_MOVE_LEFT","PLAYER_MOVE_RIGHT","PLAYER_MOVE_TOP","PLAYER_MOVE_BOTTOM","SET_PLAYER_TEXTURES","SET_PLAYER_ANIMATION_TYPES","SET_PLAYER_CURRENT_ANIMATION_TYPE","SET_ANIMATION_PLAYING","SET_CURRENT_DIRECTION_TYPE","initialState","player","position","x","y","coordinate","textures","directionTypes","top","bottom","left","right","currentDirectionType","animationTypes","waitTop","waitBottom","waitLeft","waitRight","initialAnimationTypes","currentAnimationType","animationPlaying","map","onceMapChipSize","columnMapChipCount","rowMapTipCount","initialArray","arrayRenderMapChips","chunk","playerInitPosition","seed","seedValueComputedForSaveNeedsValues","z","w","t","stage","width","height","userInput","disabled","all","s","a","d","Enter","pressed","playerReducers","state","action","type","Actions","payload","SET_INITIAL_MAP","SET_RENDER_MAP_CHIPS","setRenderMapChips","SET_MAP_TEXTURES","mapReducers","stageReducers","SET_USER_INPUT_PLESSED","setUserInputPlessed","SET_USER_INPUT_DISABLED","userInputReducers","playerSelector","getUserInputDisabled","createSelector","getUserInputPressed","useUserInput","selector","useSelector","dispatch","useDispatch","inputDisabled","inputPressed","keybordDownEvent","useCallback","event","key","undefined","userPressedKey","keybordUpEvent","userReleasedKey","UserInput","useEffect","document","addEventListener","setPlayerTextures","setPlayerAnimationsTypes","copyAnimationTypes","forEach","texture","textureId","textureCacheIds","indexOf","push","setPlayerCurrentAnimationType","animationType","setAnimationPlaying","setCurrentDirectionType","getPlayerPosition","getPlayerTextures","getAnimationTypes","getInitialAnimationTypes","getCurrentAnimationType","getAnimationPlaying","getDirectionTypes","useTextureLoader","spriteSheet","callback","Loader","add","load","_","resource","resourceFrames","data","frames","Object","keys","frame","Texture","from","usePlayer","playerPosition","process","Player","length","animationSpeed","isPlaying","anchor","scale","mapSelector","getOnceMapChipSize","getArrayRenderMapChips","getPlayerInitPosition","getTextures","generateInitialMap","getState","Array","changeOnceMapChipFromXY","mapChipId","changedArrayRenderMapChips","twoDimensionalArray","result","value","copyTwoDimensionalArray","setMapTextures","generateRandomIntFromSeed","seedNumnber","nextInt","min","max","Math","abs","useMap","ceil","floor","random","randomIntFromSeed","textureLength","index","generateArrayRenderMapChips","Map","sprites","secondValue","secondIndex","useGameLoop","changePlayerSptiteAnimation","playerTopMapChipId","playerBottomMapChipId","playerLeftMapChipId","playerRightMapChipId","GameLoop","ContextBridge","render","Context","children","Consumer","Provider","App","className","ReactReduxContext","store","reduxCreateStore","combineReducers","applyMiddleware","thunk","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.915acc83.chunk.js","sourcesContent":["export const PLAYER_MOVE_LEFT = \"PLAYER_MOVE_LEFT\";\nexport const playerMoveLeftAction = () => {\n  return {\n    type: \"PLAYER_MOVE_LEFT\",\n  };\n};\nexport const PLAYER_MOVE_RIGHT = \"PLAYER_MOVE_RIGHT\";\nexport const playerMoveRightAction = () => {\n  return {\n    type: \"PLAYER_MOVE_RIGHT\",\n  };\n};\nexport const PLAYER_MOVE_TOP = \"PLAYER_MOVE_TOP\";\nexport const playerMoveTopAction = () => {\n  return {\n    type: \"PLAYER_MOVE_TOP\",\n  };\n};\nexport const PLAYER_MOVE_BOTTOM = \"PLAYER_MOVE_BOTTOM\";\nexport const playerMoveBottomAction = () => {\n  return {\n    type: \"PLAYER_MOVE_BOTTOM\",\n  };\n};\nexport const SET_PLAYER_TEXTURES = \"SET_PLAYER_TEXTURES\";\nexport const setPlayerTextures = (textures) => {\n  return {\n    type: SET_PLAYER_TEXTURES,\n    payload: {\n      textures,\n    },\n  };\n};\nexport const SET_PLAYER_ANIMATION_TYPES = \"SET_PLAYER_ANIMATION_TYPES\";\nexport const setPlayerAnimationsTypes = (animationTypes) => {\n  return {\n    type: SET_PLAYER_TEXTURES,\n    payload: {\n      animationTypes,\n    },\n  };\n};\nexport const SET_PLAYER_CURRENT_ANIMATION_TYPE =\n  \"SET_PLAYER_CURRENT_ANIMATION_TYPE\";\nexport const setPlayerCurrentAnimationType = (currentAnimationType) => {\n  return {\n    type: SET_PLAYER_CURRENT_ANIMATION_TYPE,\n    payload: {\n      currentAnimationType,\n    },\n  };\n};\nexport const SET_ANIMATION_PLAYING = \"SET_ANIMATION_PLAYING\";\nexport const setAnimationPlaying = (animationPlaying) => {\n  return {\n    type: SET_ANIMATION_PLAYING,\n    payload: {\n      animationPlaying,\n    },\n  };\n};\nexport const SET_CURRENT_DIRECTION_TYPE = \"SET_CURRENT_DIRECTION_TYPE\";\nexport const setCurrentDirectionType = (currentDirectionType) => {\n  return {\n    type: SET_CURRENT_DIRECTION_TYPE,\n    payload: {\n      currentDirectionType,\n    },\n  };\n};\n","const gameLoop = {\n  keyInput: false,\n  playerAct: false,\n  enemyRequestAi: false,\n  playerMove: false,\n  enemyActBegin: false,\n  enemyAct: false,\n  turnEnd: false,\n};\nconst stage = {\n  stage: {\n    width: 800,\n    height: 600,\n  },\n};\nconst map = {\n  map: {\n    onceMapChipSize: 48,\n    columnMapChipCount: 13,\n    rowMapTipCount: 17,\n    initialArray: [[0]],\n    arrayRenderMapChips: [[0]],\n    chunk: [[0], [0], [0], [0], [0], [0]],\n    playerInitPosition: {\n      x: 8,\n      y: 6,\n    },\n    textures: [],\n    seed: 1,\n    seedValueComputedForSaveNeedsValues: {\n      x: 0,\n      y: 0,\n      z: 0,\n      w: 0,\n      t: 0,\n    },\n  },\n};\nconst player = {\n  player: {\n    position: {\n      x: 8 * 48,\n      y: 6 * 48,\n    },\n    coordinate: {\n      x: 8,\n      y: 6,\n    },\n    textures: [],\n    directionTypes: {\n      top: \"top\",\n      bottom: \"bottom\",\n      left: \"left\",\n      right: \"right\",\n    },\n    currentDirectionType: \"top\",\n    animationTypes: {\n      waitTop: [],\n      waitBottom: [],\n      waitLeft: [],\n      waitRight: [],\n      top: [],\n      bottom: [],\n      left: [],\n      right: [],\n    },\n    initialAnimationTypes: \"waitTop\",\n    currentAnimationType: [],\n    animationPlaying: false,\n  },\n};\nconst userInput = {\n  userInput: {\n    disabled: {\n      all: false,\n      w: false,\n      s: false,\n      a: false,\n      d: false,\n      Enter: false,\n    },\n    pressed: {\n      w: false,\n      s: false,\n      a: false,\n      d: false,\n      Enter: false,\n    },\n  },\n};\n\nconst initialState = {\n  ...player,\n  ...map,\n  ...stage,\n  ...userInput,\n};\nexport default initialState;\n","import * as Actions from \"./actions\";\nimport initialState from \"../../initialState\";\n\nexport const playerReducers = (state = initialState.player, action) => {\n  switch (action.type) {\n    case Actions.PLAYER_MOVE_LEFT:\n      return {\n        ...state,\n        ...{\n          position: {\n            x: state.position.x - initialState.map.onceMapChipSize,\n            y: state.position.y,\n          },\n        },\n      };\n    case Actions.PLAYER_MOVE_RIGHT:\n      return {\n        ...state,\n        ...{\n          position: {\n            x: state.position.x + initialState.map.onceMapChipSize,\n            y: state.position.y,\n          },\n        },\n      };\n    case Actions.PLAYER_MOVE_TOP:\n      return {\n        ...state,\n        ...{\n          position: {\n            x: state.position.x,\n            y: state.position.y - initialState.map.onceMapChipSize,\n          },\n        },\n      };\n    case Actions.PLAYER_MOVE_BOTTOM:\n      return {\n        ...state,\n        ...{\n          position: {\n            x: state.position.x,\n            y: state.position.y + initialState.map.onceMapChipSize,\n          },\n        },\n      };\n    case Actions.SET_PLAYER_TEXTURES:\n      return {\n        ...state,\n        ...action.payload.textures,\n      };\n    case Actions.SET_PLAYER_ANIMATION_TYPES:\n      return {\n        ...state,\n        ...action.payload.animationTypes,\n      };\n    case Actions.SET_PLAYER_CURRENT_ANIMATION_TYPE:\n      return {\n        ...state,\n        ...action.payload.currentAnimationType,\n      };\n    case Actions.SET_ANIMATION_PLAYING:\n      return {\n        ...state,\n        ...action.payload.animationPlaying,\n      };\n    case Actions.SET_CURRENT_DIRECTION_TYPE:\n      return {\n        ...state,\n        ...action.payload.currentDirectionType,\n      };\n    default:\n      return state;\n  }\n};\n","export const SET_INITIAL_MAP = \"SET_INITIAL_MAP\";\nexport const setInitialMap = (initialArray) => {\n  return {\n    type: SET_INITIAL_MAP,\n    payload: {\n      initialArray,\n    },\n  };\n};\nexport const SET_RENDER_MAP_CHIPS = \"SET_RENDER_MAP_CHIPS\";\nexport const setRenderMapChips = (arrayRenderMapChips) => {\n  return {\n    type: SET_RENDER_MAP_CHIPS,\n    payload: {\n      arrayRenderMapChips,\n    },\n  };\n};\nexport const SET_MAP_TEXTURES = \"SET_MAP_TEXTURES\";\nexport const setMapTextures = (textures) => {\n  return {\n    type: SET_MAP_TEXTURES,\n    payload: {\n      textures,\n    },\n  };\n};\n","import * as Actions from \"./actions\";\nimport initialState from \"../../initialState\";\n\nexport const mapReducers = (state = initialState.map, action) => {\n  switch (action.type) {\n    case Actions.SET_INITIAL_MAP:\n      return {\n        ...state,\n        ...action.payload.initialArray,\n      };\n    case Actions.SET_RENDER_MAP_CHIPS:\n      return {\n        ...state,\n        ...action.payload.arrayRenderMapChips,\n      };\n    case Actions.SET_MAP_TEXTURES:\n      return {\n        ...state,\n        ...action.payload.textures,\n      };\n    default:\n      return state;\n  }\n};\n","import * as Actions from \"./actions\";\nimport initialState from \"../../initialState\";\n\nexport const stageReducers = (state = initialState.stage, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n","export const SET_USER_INPUT_PLESSED = \"SET_USER_INPUT_PLESSED\";\nexport const setUserInputPlessed = (pressed) => {\n  return {\n    type: SET_USER_INPUT_PLESSED,\n    payload: {\n      pressed,\n    },\n  };\n};\nexport const SET_USER_INPUT_DISABLED = \"SET_USER_INPUT_DISABLED\";\nexport const setUserInputDisabled = (disabled) => {\n  return {\n    type: SET_USER_INPUT_DISABLED,\n    payload: {\n      disabled,\n    },\n  };\n};\n","import * as Actions from \"./actions\";\nimport initialState from \"../../initialState\";\n\nexport const userInputReducers = (state = initialState.userInput, action) => {\n  switch (action.type) {\n    case Actions.SET_USER_INPUT_PLESSED:\n      return {\n        ...state,\n        ...action.payload.pressed,\n      };\n    case Actions.SET_USER_INPUT_DISABLED:\n      return {\n        ...state,\n        ...action.payload.disabled,\n      };\n    default:\n      return state;\n  }\n};\n","import { createSelector } from \"reselect\";\n\nconst playerSelector = (state) => state.userInput;\n\nexport const getUserInputDisabled = createSelector(\n  [playerSelector],\n  (state) => state.disabled\n);\nexport const getUserInputPressed = createSelector(\n  [playerSelector],\n  (state) => state.pressed\n);\n","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  userPressedKey,\n  userReleasedKey,\n} from \"../store/ducks/userInput/operations\";\nimport {\n  getUserInputDisabled,\n  getUserInputPressed,\n} from \"../store/ducks/userInput/selecors\";\n\nconst useUserInput = () => {\n  const selector = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const inputDisabled = getUserInputDisabled(selector);\n  const inputPressed = getUserInputPressed(selector);\n\n  const keybordDownEvent = useCallback((event) => {\n    if (inputDisabled.all || inputDisabled[event.key]) return;\n    dispatch(userPressedKey(inputPressed, event.key));\n  }, []);\n  const keybordUpEvent = useCallback((event) => {\n    if (inputDisabled.all) return;\n    dispatch(userReleasedKey(inputPressed, event.key));\n  }, []);\n  return {\n    keybordDownEvent,\n    keybordUpEvent,\n  };\n};\n\nexport default useUserInput;\n","import * as Actions from \"./actions\";\n\nexport const userPressedKey = (inputPressed, key) => {\n  const pressed = { ...inputPressed };\n  if (pressed[key] != undefined) pressed[key] = true;\n  return (dispatch) => {\n    dispatch(\n      Actions.setUserInputPlessed({\n        pressed,\n      })\n    );\n  };\n};\nexport const userReleasedKey = (inputPressed, key) => {\n  const pressed = { ...inputPressed };\n  if (pressed[key] != undefined) pressed[key] = false;\n  return (dispatch) => {\n    dispatch(\n      Actions.setUserInputPlessed({\n        pressed,\n      })\n    );\n  };\n};\n","import React, { useEffect } from \"react\";\nimport useUserInput from \"../hooks/useUserInput\";\n\nconst UserInput = () => {\n  const { keybordDownEvent, keybordUpEvent } = useUserInput();\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", keybordDownEvent, false);\n    document.addEventListener(\"keyup\", keybordUpEvent, false);\n  }, []);\n\n  return <></>;\n};\nexport default UserInput;\n","import * as Actions from \"./actions\";\n\nexport const setPlayerTextures = (textures) => {\n  return (dispatch) => {\n    dispatch(\n      Actions.setPlayerTextures({\n        textures,\n      })\n    );\n  };\n};\nexport const setPlayerAnimationsTypes = (textures, animationTypes) => {\n  const copyAnimationTypes = { ...animationTypes };\n  textures.forEach((texture) => {\n    const textureId = texture.textureCacheIds[0];\n    for (const key in copyAnimationTypes) {\n      if (textureId.indexOf(key) != -1) {\n        copyAnimationTypes[key].push(texture);\n      }\n    }\n  });\n  return (dispatch) => {\n    dispatch(\n      Actions.setPlayerAnimationsTypes({\n        copyAnimationTypes,\n      })\n    );\n  };\n};\nexport const setPlayerCurrentAnimationType = (animationType) => {\n  const currentAnimationType = animationType;\n  return (dispatch) => {\n    dispatch(\n      Actions.setPlayerCurrentAnimationType({\n        currentAnimationType,\n      })\n    );\n  };\n};\nexport const setAnimationPlaying = (animationPlaying) => {\n  return (dispatch) => {\n    dispatch(\n      Actions.setAnimationPlaying({\n        animationPlaying,\n      })\n    );\n  };\n};\nexport const setCurrentDirectionType = (currentDirectionType) => {\n  return (dispatch) => {\n    dispatch(\n      Actions.setCurrentDirectionType({\n        currentDirectionType,\n      })\n    );\n  };\n};\n","import { createSelector } from \"reselect\";\n\nconst playerSelector = (state) => state.player;\n\nexport const getPlayerPosition = createSelector(\n  [playerSelector],\n  (state) => state.position\n);\nexport const getPlayerTextures = createSelector(\n  [playerSelector],\n  (state) => state.textures\n);\nexport const getAnimationTypes = createSelector(\n  [playerSelector],\n  (state) => state.animationTypes\n);\nexport const getInitialAnimationTypes = createSelector(\n  [playerSelector],\n  (state) => state.initialAnimationTypes\n);\nexport const getCurrentAnimationType = createSelector(\n  [playerSelector],\n  (state) => state.currentAnimationType\n);\nexport const getAnimationPlaying = createSelector(\n  [playerSelector],\n  (state) => state.animationPlaying\n);\nexport const getDirectionTypes = createSelector(\n  [playerSelector],\n  (state) => state.directionTypes\n);\nexport const getCurrentDirectionType = createSelector(\n  [playerSelector],\n  (state) => state.currentDirectionType\n);\n","import { Texture, Loader } from \"pixi.js\";\nexport const useTextureLoader = (spriteSheet, callback) => {\n  const loader = new Loader();\n  loader.add(spriteSheet).load((_, resource) => {\n    const resourceFrames = resource[spriteSheet].data.frames;\n    const textures = Object.keys(resourceFrames).map((frame) =>\n      Texture.from(frame)\n    );\n    callback(textures);\n  });\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setPlayerTextures,\n  setPlayerAnimationsTypes,\n  setPlayerCurrentAnimationType,\n  setAnimationPlaying,\n} from \"../store/ducks/player/operations\";\nimport {\n  getPlayerPosition,\n  getPlayerTextures,\n  getAnimationTypes,\n  getCurrentAnimationType,\n  getAnimationPlaying,\n  getInitialAnimationTypes,\n  getDirectionTypes,\n} from \"../store/ducks/player/selecors\";\nimport { useTextureLoader } from \"./common/useTextureLoader\";\n\nconst usePlayer = () => {\n  const selector = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const playerPosition = getPlayerPosition(selector);\n  const animationTypes = getAnimationTypes(selector);\n  const currentAnimationType = getCurrentAnimationType(selector);\n  const textures = getPlayerTextures(selector);\n  const animationPlaying = getAnimationPlaying(selector);\n  const initialAnimationTypes = getInitialAnimationTypes(selector);\n\n  const directionTypes = getDirectionTypes(selector);\n\n  const spriteSheet = `${process.env.PUBLIC_URL}/assets/sprite/player/player.json`;\n\n  useEffect(() => {\n    useTextureLoader(spriteSheet, (textures) =>\n      dispatch(setPlayerTextures(textures))\n    );\n  }, []);\n\n  useEffect(() => {\n    dispatch(setPlayerAnimationsTypes(textures, animationTypes));\n    dispatch(\n      setPlayerCurrentAnimationType(animationTypes[initialAnimationTypes])\n    );\n    dispatch(setAnimationPlaying(true));\n  }, [textures]);\n\n  return {\n    textures,\n    playerPosition,\n    currentAnimationType,\n    animationPlaying,\n  };\n};\nexport default usePlayer;\n","import { AnimatedSprite, Container } from \"@inlet/react-pixi\";\nimport usePlayer from \"../hooks/usePlayer\";\nconst Player = () => {\n  const { playerPosition, currentAnimationType, animationPlaying } =\n    usePlayer();\n\n  if (currentAnimationType.length === 0) {\n    return null;\n  }\n  return (\n    <Container>\n      <AnimatedSprite\n        animationSpeed={0.1}\n        isPlaying={animationPlaying}\n        textures={currentAnimationType}\n        anchor={(0, 0)}\n        scale={1}\n        x={playerPosition.x}\n        y={playerPosition.y}\n      />\n    </Container>\n  );\n};\n\nexport default Player;\n","import { createSelector } from \"reselect\";\n\nconst mapSelector = (state) => state.map;\n\nexport const getOnceMapChipSize = createSelector(\n  [mapSelector],\n  (state) => state.onceMapChipSize\n);\nexport const getArrayRenderMapChips = createSelector(\n  [mapSelector],\n  (state) => state.arrayRenderMapChips\n);\nexport const getPlayerInitPosition = createSelector(\n  [mapSelector],\n  (state) => state.playerInitPosition\n);\nexport const getTextures = createSelector(\n  [mapSelector],\n  (state) => state.textures\n);\nexport const getSeed = createSelector([mapSelector], (state) => state.seed);\n","import * as Actions from \"./actions\";\n\nexport const generateArrayRenderMapChips = (\n  textureLength,\n  randomIntFromSeed\n) => {\n  return (dispatch, getState) => {\n    const { map } = getState();\n    const arrayRenderMapChips = map.initialArray.map((value, index) => {\n      return value.map(() => {\n        return randomIntFromSeed.nextInt(0, textureLength);\n      });\n    });\n    dispatch(\n      Actions.setRenderMapChips({\n        arrayRenderMapChips,\n      })\n    );\n  };\n};\nexport const generateInitialMap = () => {\n  return (dispatch, getState) => {\n    const { map } = getState();\n    const initialArray = Array.from(Array(map.columnMapChipCount), () =>\n      Array.from(Array(map.rowMapTipCount), () => 0)\n    );\n    dispatch(\n      Actions.setInitialMap({\n        initialArray,\n      })\n    );\n  };\n};\n\nexport const changeOnceMapChipFromXY = (x, y, mapChipId) => {\n  return (dispatch, getState) => {\n    const { map } = getState();\n    const copyTwoDimensionalArray = (twoDimensionalArray) => {\n      const result = [];\n      for (const value of twoDimensionalArray) {\n        result.push([...value]);\n      }\n      return result;\n    };\n    let changedArrayRenderMapChips = copyTwoDimensionalArray(\n      map.arrayRenderMapChips\n    );\n    changedArrayRenderMapChips[y][x] = mapChipId;\n    dispatch(\n      Actions.setRenderMapChips({\n        arrayRenderMapChips: changedArrayRenderMapChips,\n      })\n    );\n  };\n};\n\nexport const setMapTextures = (textures) => {\n  return (dispatch) => {\n    dispatch(\n      Actions.setMapTextures({\n        textures,\n      })\n    );\n  };\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getOnceMapChipSize,\n  getArrayRenderMapChips,\n  getPlayerInitPosition,\n  getTextures,\n  getSeed,\n} from \"../store/ducks/map/selecors\";\nimport {\n  generateInitialMap,\n  generateArrayRenderMapChips,\n  changeOnceMapChipFromXY,\n  setMapTextures,\n} from \"../store/ducks/map/operations\";\nimport { useTextureLoader } from \"./common/useTextureLoader\";\n\nconst spriteSheet = `${process.env.PUBLIC_URL}/assets/sprite/map/map.json`;\n\nconst generateRandomIntFromSeed = (seedNumnber) => {\n  const seed = !seedNumnber ? 88675123 : seedNumnber;\n  let x = 123456789;\n  let y = 362436069;\n  let z = 521288629;\n  let w = seed;\n\n  // XorShift\n  let t;\n\n  const next = () => {\n    t = x ^ (x << 11);\n    x = y;\n    y = z;\n    z = w;\n    return (w = w ^ (w >>> 19) ^ (t ^ (t >>> 8)));\n  };\n  const nextInt = (min, max) => {\n    const r = Math.abs(next());\n    return min + (r % (max + 1 - min));\n  };\n\n  return {\n    nextInt,\n  };\n};\n\nconst useMap = () => {\n  const selector = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const MINIMUM_SEED_NUM = 1;\n  const MAXIMUM_SEED_NUM = 100;\n  const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  const playerInitPosition = getPlayerInitPosition(selector);\n  const onceMapChipSize = getOnceMapChipSize(selector);\n  const arrayRenderMapChips = getArrayRenderMapChips(selector);\n  const textures = getTextures(selector);\n  // const seed = getSeed(selector);\n  const seed = getRandomInt(MINIMUM_SEED_NUM, MAXIMUM_SEED_NUM);\n  const randomIntFromSeed = generateRandomIntFromSeed(seed);\n\n  useEffect(() => {\n    dispatch(generateInitialMap());\n    useTextureLoader(spriteSheet, (textures) =>\n      dispatch(setMapTextures(textures))\n    );\n  }, []);\n\n  useEffect(() => {\n    const textureLength = Object.keys(textures).length - 1;\n    dispatch(generateArrayRenderMapChips(textureLength, randomIntFromSeed));\n    dispatch(\n      changeOnceMapChipFromXY(playerInitPosition.x, playerInitPosition.y, 0)\n    );\n  }, [textures]);\n\n  return {\n    onceMapChipSize,\n    arrayRenderMapChips,\n    textures,\n  };\n};\n\nexport default useMap;\n","import React from \"react\";\nimport useMap from \"../hooks/useMap\";\nimport { Container, Sprite } from \"@inlet/react-pixi\";\n\nconst Map = () => {\n  const { onceMapChipSize, arrayRenderMapChips, textures } = useMap();\n\n  if (textures.length === 0) {\n    return null;\n  }\n\n  return (\n    <Container>\n      {arrayRenderMapChips.map((value, index) => {\n        const sprites = value.map((secondValue, secondIndex) => {\n          if (textures[secondValue] === undefined) {\n            return;\n          }\n          return (\n            <Sprite\n              texture={textures[secondValue]}\n              x={secondIndex * onceMapChipSize}\n              y={index * onceMapChipSize}\n              key={secondIndex}\n            />\n          );\n        });\n        return [...sprites];\n      })}\n    </Container>\n  );\n};\nexport default Map;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setPlayerCurrentAnimationType,\n  setAnimationPlaying,\n  setCurrentDirectionType,\n} from \"../store/ducks/player/operations\";\nimport { changeOnceMapChipFromXY } from \"../store/ducks/map/operations\";\n\nconst useGameLoop = () => {\n  const selector = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const changePlayerSptiteAnimation = (animationType) => {\n    dispatch(setAnimationPlaying(false));\n    dispatch(setPlayerCurrentAnimationType(animationType));\n    dispatch(setAnimationPlaying(true));\n  };\n\n  useEffect(() => {\n    if (selector.userInput.pressed.w) {\n      changePlayerSptiteAnimation(selector.player.animationTypes.top);\n      dispatch(setCurrentDirectionType(selector.player.directionTypes.top));\n    } else {\n      changePlayerSptiteAnimation(selector.player.animationTypes.waitTop);\n    }\n  }, [selector.userInput.pressed.w]);\n\n  useEffect(() => {\n    if (selector.userInput.pressed.s) {\n      changePlayerSptiteAnimation(selector.player.animationTypes.bottom);\n      dispatch(setCurrentDirectionType(selector.player.directionTypes.bottom));\n    } else {\n      changePlayerSptiteAnimation(selector.player.animationTypes.waitBottom);\n    }\n  }, [selector.userInput.pressed.s]);\n\n  useEffect(() => {\n    if (selector.userInput.pressed.a) {\n      changePlayerSptiteAnimation(selector.player.animationTypes.left);\n      dispatch(setCurrentDirectionType(selector.player.directionTypes.left));\n    } else {\n      changePlayerSptiteAnimation(selector.player.animationTypes.waitLeft);\n    }\n  }, [selector.userInput.pressed.a]);\n\n  useEffect(() => {\n    if (selector.userInput.pressed.d) {\n      changePlayerSptiteAnimation(selector.player.animationTypes.right);\n      dispatch(setCurrentDirectionType(selector.player.directionTypes.right));\n    } else {\n      changePlayerSptiteAnimation(selector.player.animationTypes.waitRight);\n    }\n  }, [selector.userInput.pressed.d]);\n\n  useEffect(() => {\n    if (selector.userInput.pressed.Enter) {\n      const playerTopMapChipId =\n        selector.map.arrayRenderMapChips[selector.player.coordinate.y - 1][\n          selector.player.coordinate.x\n        ];\n      const playerBottomMapChipId =\n        selector.map.arrayRenderMapChips[selector.player.coordinate.y + 1][\n          selector.player.coordinate.x\n        ];\n      const playerLeftMapChipId =\n        selector.map.arrayRenderMapChips[selector.player.coordinate.y][\n          selector.player.coordinate.x - 1\n        ];\n      const playerRightMapChipId =\n        selector.map.arrayRenderMapChips[selector.player.coordinate.y][\n          selector.player.coordinate.x + 1\n        ];\n      switch (selector.player.currentDirectionType) {\n        case selector.player.directionTypes.top:\n          if (playerTopMapChipId != 0) {\n            dispatch(\n              changeOnceMapChipFromXY(\n                selector.player.coordinate.x,\n                selector.player.coordinate.y - 1,\n                0\n              )\n            );\n          }\n          break;\n        case selector.player.directionTypes.bottom:\n          if (playerBottomMapChipId != 0) {\n            dispatch(\n              changeOnceMapChipFromXY(\n                selector.player.coordinate.x,\n                selector.player.coordinate.y + 1,\n                0\n              )\n            );\n          }\n          break;\n        case selector.player.directionTypes.left:\n          if (playerLeftMapChipId != 0) {\n            dispatch(\n              changeOnceMapChipFromXY(\n                selector.player.coordinate.x - 1,\n                selector.player.coordinate.y,\n                0\n              )\n            );\n          }\n          break;\n        case selector.player.directionTypes.right:\n          if (playerRightMapChipId != 0) {\n            dispatch(\n              changeOnceMapChipFromXY(\n                selector.player.coordinate.x + 1,\n                selector.player.coordinate.y,\n                0\n              )\n            );\n          }\n          break;\n      }\n    }\n  }, [selector.userInput.pressed.Enter]);\n};\n\nexport default useGameLoop;\n","import useGameLoop from \"../hooks/useGameLoop\";\n\nconst GameLoop = () => {\n  useGameLoop();\n  return <></>;\n};\nexport default GameLoop;\n","import React from \"react\";\n\n//react-pixiでは別のコンテキストでラップされているようなので\n//Consumerでreduxのコンテキストの変更を感知し、stageの子コンポーネントに対して再度reduxのコンテキストでラップする\nconst ContextBridge = ({ render, Context, children }) => (\n  <Context.Consumer>\n    {value =>\n      render(<Context.Provider value={value}>{children}</Context.Provider>)\n    }\n  </Context.Consumer>\n);\n\nexport default ContextBridge;\n","//リロードするとランダムでマップが生成される\nimport { useDispatch, useSelector, ReactReduxContext } from \"react-redux\";\nimport { Stage } from \"@inlet/react-pixi\";\nimport \"./styles.css\";\nimport UserInput from \"./components/UserInput\";\nimport Player from \"./components/Player\";\nimport Map from \"./components/Map\";\nimport GameLoop from \"./components/GameLoop\";\nimport ContextBridge from \"./components/ContextBridge\";\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state);\n  return (\n    <>\n      <div className=\"App\">\n        {/*renderPropで子コンポーネントを渡し、react-pixiコンポーネントにコンテキストを渡す*/}\n        <ContextBridge\n          Context={ReactReduxContext}\n          render={(children) => (\n            <Stage width={selector.stage.width} height={selector.stage.height}>\n              {children}\n            </Stage>\n          )}\n        >\n          <Map />\n          <Player />\n        </ContextBridge>\n      </div>\n      <GameLoop />\n      <UserInput />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport createStore from \"./store/store\";\nimport App from \"./App\";\nimport \"./styles.css\";\n\nexport const store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import {\n  createStore as reduxCreateStore,\n  combineReducers,\n  applyMiddleware,\n} from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { playerReducers } from \"./ducks/player/reducers\";\nimport { mapReducers } from \"./ducks/map/reducers\";\nimport { stageReducers } from \"./ducks/stage/reducers\";\nimport { userInputReducers } from \"./ducks/userInput/reducers\";\n\nexport default function createStore() {\n  return reduxCreateStore(\n    combineReducers({\n      player: playerReducers,\n      map: mapReducers,\n      stage: stageReducers,\n      userInput: userInputReducers,\n    }),\n    applyMiddleware(thunk)\n  );\n}\n"],"sourceRoot":""}